① empty_seat変数 = C
② seats_count変数 = A
③ number_of_visitors変数 = E
④ users変数 =F
⑤ seating_number変数 =F
⑥ fill_last_number変数 =E

以下正解コードの読み取り記入致します。
A=8
B=10
C=13
D=11
E=15
F=4
G=6
H=12
I=9
J=7
K=3
L=2
M=5
N=14
O=17
P=1
Q=16


P（１）埋まっていない、かつ、末尾の番号が座席の数を超えていなければ、そのまま来店した人数分の座席を埋めていきます
L（２）最後の人間が着席した座席の番号が、最初に定義された座席の数を超えていなかったら、そのまま計算します
K（３）もしも最後の人間が着席した座席の番号が、最初に定義された座席の数を超えていたら、最初の座席の数に戻して再計算します（円卓だから）
F（４）二行目以降の行（グループの人数と着席開始座席番号）の入力を受け付けます
M（５）来店したグループの座りたい座席がすでに埋まっていないかをif文で確認します（埋まっていなければif内の処理をします）
G（６）来店したグループの人数を変数に代入します
J（７）来店したグループが座席につけるかどうかを確認するための配列を、if文で条件分けしながら定義します。
A（８）最初の行（座席数と入店するグループの総数）の入力を受け付けます
I（９）来店したグループの最後の人間が着席した座席の番号を変数に代入します
B（１０）座席を配列で作成します
D（１１）何組のグループが入店するのか、その数を変数に入れておきます
H（１２）来店したグループの着席開始座席番号を変数に代入します
C（１３）座席の数を変数に入れておきます
N（１４）最後の人間が着席した座席の番号が、最初に定義された座席の数を超えていた場合と、そうでない場合とで座席の埋め方をif文で分岐させます
E（１５）入店するグループの数だけループさせます
Q（１６）最終的に座席に座っている人数を出力します
O（１７）埋まっていない、かつ、末尾の番号が最初に定義された座席の数を超えていれば、最初の座席の番号〜末尾の番号と、着席開始座席番号〜最後の座席の番号、の二回に分けて座席を埋めていきます